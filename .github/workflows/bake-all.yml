name: "Build All Images"
run-name: >
  Build by @${{ github.actor }} with ${{ github.event_name }}
  (Release: ${{
    (github.event_name == 'repository_dispatch' && github.event.client_payload.release_tag) || 'N/A'
  }})

on:

  repository_dispatch:
    types: [event-bake-all]

  workflow_dispatch:
    inputs:
      skip_images:
        description: 'Skip building images? (no = build both artifacts and images, yes = build only artifacts)'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      check_oci:
        description: 'Check OCI registry for existing artifacts? (yes = skip if exists, no = always rebuild)'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      runner:
        description: 'GitHub runner type for build jobs'
        required: false
        options:
          - 'ubuntu-latest'          # Standard GitHub-hosted runner
          - 'github-linux64-ubuntu-latest-8core'  # Large GitHub-hosted runner
          - 'github-arm64-ubuntu-24.04-8core'  # ARM64 self-hosted runner
        type: choice
        default: 'ubuntu-latest'

      extra_params:
        description: 'Additional build parameters for all jobs (e.g., DEBUG=yes, CLEAN_LEVEL=make-kernel). These will be passed to prepare, artifact, and image build phases.'
        required: false
        default: ''
        type: string

      branch:
        type: choice
        description: 'Armbian build framework branch to use'
        required: false
        options:
        - armbian    # Main stable branch
        - main       # Development branch
        default: 'armbian'

      board:
        type: choice
        description: 'Target board (leave "all" to build all boards in targets file)'
        required: false
        options:
        - orangepi5-plus    # Orange Pi 5 Plus board
        default: 'all'

      maintainer:
        type: choice
        description: 'Board maintainer filter (leave "all" for all maintainers)'
        required: false
        options:
        - diverger    # Your custom builds
        default: 'all'

      targets_filter_incs:
        description: 'Comma-separated list of targets to include in the build (e.g., "orangepi5,rock5b" or "standard" for image types). Leave empty to build all available targets from the targets file.'
        required: false
        default: ''
        type: string

      nightly:
        description: 'Build type (yes = nightly/development build, no = stable release build)'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      armbian_ver:
        description: 'Specific Armbian build framework version to use (leave empty to use latest stable version from stable.json)'
        required: false
        default: ''
        type: string

env:

  BUILD_REPOSITORY: "diverger/armbian-build"
  BUILD_REF: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.armbian_ref || github.event.inputs.branch || 'armbian' }}

  USERPATCHES_REPOSITORY: "diverger/armbian-os"
  USERPATCHES_REF: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.armbian_os_ref) || 'diverger' }}
  USERPATCHES_DIR: "userpatches"

  # only used for nightly builds, and for 'community' and 'distribution' releases
  RELEASE_REPOSITORY: "armbian-baker"
  DOCKER_SKIP_UPDATE: "yes"
  EXTRA_PARAMS_ALL_BUILDS: "${{ github.event.client_payload.extra_params || inputs.extra_params || 'UPLOAD_TO_OCI_ONLY=yes' }}"

  ARMBIAN_VER: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.armbian_ver) || (github.event_name == 'repository_dispatch' && github.event.client_payload.armbian_ver) || '' }}

  GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
  GHCR_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

  EXTRA_PARAMS_IMAGE: "SHARE_LOG=no "

  RELEASE_TAG: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.release_tag) || '' }}
  RELEASE_VER: ""
  RELEASE_ID: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.release_id) || '' }}

  CUSTOM_REP: "diverger/armbian-custom"
  CUSTOM_REF: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.custom_ref) || 'main' }}

  TARGETS_FILE: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.targets_file) || 'targets-diverger-stable.yml' }}

  NIGHTLY_BUILD: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.nightly) || (github.event_name == 'workflow_dispatch' && github.event.inputs.nightly) || 'yes' }}

  CHECK_OCI: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.check_oci) || (github.event_name == 'workflow_dispatch' && github.event.inputs.check_oci) || 'no' }}

  SKIP_IMAGES: ${{ github.event.client_payload.skip_images || github.event.inputs.skip_images || 'no' }}

concurrency:
  group: ${{ (github.event.inputs.nightly == 'yes' || github.event.client_payload.nightly == 'yes') && format('{0}-nightly', github.workflow) || format('{0}-stable', github.workflow) }}
  cancel-in-progress: false

jobs:

  build_prep:
    name: "Do preparations"
    if: ${{ github.actor == 'diverger' }}
    runs-on: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}
    # runs-on: ubuntu-latest
    steps:

      # - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
      #   uses: actions/checkout@v5
      #   if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
      #   with:
      #     token: ${{ env.GH_TOKEN }}
      #     repository: ${{ env.USERPATCHES_REPOSITORY }}
      #     ref: ${{ env.USERPATCHES_REF }}
      #     fetch-depth: 0
      #     clean: false # true is default

      - name: Checkout custom repo
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 1
          clean: false

      - name: Get Armbian version
        run: |
          mkdir -p downloads

          _EFFECTIVE_ARMBIAN_VERSION=""
          if [ -z "$ARMBIAN_VER" ]; then
            echo "Workflow ARMBIAN_VER env is empty. Reading from armbian-stable.json."
            _EFFECTIVE_ARMBIAN_VERSION=$(jq -r '.version' armbian-stable.json)
          else
            echo "Using ARMBIAN_VER from workflow env: $ARMBIAN_VER"
            _EFFECTIVE_ARMBIAN_VERSION="$ARMBIAN_VER"
          fi

          echo "Final ARMBIAN_VER determined: $_EFFECTIVE_ARMBIAN_VERSION"

          # Set it for subsequent steps in this job and for job outputs (via ${{ env.ARMBIAN_VER }})
          echo "ARMBIAN_VER=$_EFFECTIVE_ARMBIAN_VERSION" >> $GITHUB_ENV

          # Create the version artifact
          echo "$_EFFECTIVE_ARMBIAN_VERSION" > downloads/version

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: assets-for-download-${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}
          path: downloads
          retention-days: 5

      - name: 'Make release version/tag'
        id: make_release_tag
        run: |
          if [ -z "$RELEASE_TAG" ]; then
            echo "RELEASE_TAG=$(TZ='Asia/Shanghai' date +"%Y-%m-%d-%H-%M-%S")" >> $GITHUB_ENV
          fi

          # Compute RELEASE_VER by removing first character if it's not a digit
          if [ -n "$RELEASE_TAG" ]; then
            first_char="${RELEASE_TAG:0:1}"
            if [[ "$first_char" =~ ^[0-9]$ ]]; then
              # First character is a digit, keep the whole tag
              echo "RELEASE_VER=$RELEASE_TAG" >> $GITHUB_ENV
            else
              # First character is not a digit, remove it
              echo "RELEASE_VER=${RELEASE_TAG:1}" >> $GITHUB_ENV
            fi
          else
            echo "RELEASE_VER=" >> $GITHUB_ENV
          fi

      # Note: The officital version will create a pre-release here, for nightly build and image not skipped
      # we don't need it here

      - name: Save
        id: releases
        run: |
          echo "armbian_ver=${{ env.ARMBIAN_VER }}" >> $GITHUB_OUTPUT
          echo "release_tag=${{ env.RELEASE_TAG }}" >> $GITHUB_OUTPUT
          echo "release_ver=${{ env.RELEASE_VER }}" >> $GITHUB_OUTPUT

    outputs:

      # not related to matrix
      armbian_ver: ${{ steps.releases.outputs.armbian_ver }}
      release_tag: ${{ steps.releases.outputs.release_tag }}
      release_ver: ${{ steps.releases.outputs.release_ver }}

  matrix_prep:
    name: "JSON matrix: 17/16 :: 17 artifact chunks, 16 image chunks"
    if: ${{ github.actor == 'diverger' }}
    needs: [ build_prep ]
    runs-on: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}
    steps:

      # clean runners, self-hosted, or GitHub's
      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ env.BUILD_REF }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: 0
          clean: false
          path: build

      - name: "grab the sha1 of the commit of the custom-build repo ${{ env.BUILD_REPOSITORY }}#${{ env.BUILD_REF }}"
        id: armbian-build-commit
        run: |
          cd build
          echo "armbian_build_sha1=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          cd ..

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: 0
          clean: false
          path: userpatches

      - name: "grab the sha1 of the commit of the custom-os repo ${{ env.USERPATCHES_REPOSITORY }}#${{ env.USERPATCHES_REF }}"
        id: armbian-os-commit
        run: |
          cd userpatches
          echo "armbian_os_sha1=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          cd ..

      - name: Checkout custom repo
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "grab the sha1 of the commit of the custom repo ${{ env.CUSTOM_REP }}#${{ env.CUSTOM_REF }}"
        id: custom-commit
        run: |
          cd custom
          echo "custom_sha1=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          cd ..

      - name: Put userpatches in place
        run: |
          mkdir -pv build/userpatches
          rsync -av userpatches/${{env.USERPATCHES_DIR}}/. build/userpatches/
          rsync -av custom/userpatches/. build/userpatches/

      - name: Checkout patched oras-py
        if: false
        uses: actions/checkout@v5
        with:
          repository: 'oras-project/oras-py'
          ref: '0.2.33'
          path: oras-py-temp # Temporary location for oras-py

      - name: Put oras-py patches in place
        if: false
        run: |

          # Configure local oras-py package for Docker container access
          # SOLUTION: Place oras-py in userpatches directory because Armbian preserves
          # userpatches when launching Docker containers, ensuring pip can access the package
          echo "Setting up local oras-py package for Armbian build..."
          cp -r oras-py-temp build/userpatches/oras-py-local
          echo "✓ oras-py copied to build/userpatches/oras-py-local"

          # Create a minimal debug script for emergency troubleshooting (only used when DEBUG_PIP_INSTALL=yes)
          cat > build/userpatches/debug-pip-install.sh << 'EOF'
          #!/bin/bash
          echo "=== pip edible install debug ==="
          echo "Working directory: $(pwd)"
          echo "Python: $(python3 --version)"
          echo "Pip: $(python3 -m pip --version)"

          # Check oras-py package accessibility
          if [ -d "./userpatches/oras-py-local" ]; then
            echo "✓ oras-py package found at ./userpatches/oras-py-local"
            [ -f "./userpatches/oras-py-local/setup.py" ] && echo "✓ setup.py present"
            [ -f "./userpatches/oras-py-local/pyproject.toml" ] && echo "✓ pyproject.toml present"
          else
            echo "✗ oras-py package NOT found at ./userpatches/oras-py-local"
          fi

          # Check requirements.txt
          if [ -f "./requirements.txt" ]; then
            echo "Requirements.txt contains:"
            grep -E "(oras|userpatches)" ./requirements.txt || echo "No oras references found"
          fi
          echo "=== debug end ==="
          EOF
          chmod +x build/userpatches/debug-pip-install.sh

      - name: Verify oras-py setup for Docker
        if: false
        shell: bash
        run: |
          echo "Verifying oras-py package structure:"
          if [ -f "oras-py-temp/setup.py" ] || [ -f "oras-py-temp/pyproject.toml" ]; then
            echo "✓ Valid Python package found in oras-py-temp"
          else
            echo "✗ ERROR: Invalid Python package in oras-py-temp"
            exit 1
          fi

          echo "Verifying userpatches setup:"
          if [ -d "build/userpatches/oras-py-local" ]; then
            echo "✓ oras-py-local copied to userpatches"
          else
            echo "✗ ERROR: oras-py-local not found in userpatches"
            exit 1
          fi

      - name: Patch requirements.txt for local oras-py
        if: false
        run: |
          # Configure requirements.txt to use the local oras-py package from userpatches
          # This allows the Docker container to access oras-py via the preserved userpatches directory
          # Path: build/userpatches/oras-py-local -> /armbian/userpatches/oras-py-local (in container)
          REQUIREMENTS_FILE="build/requirements.txt"
          LOCAL_ORAS_PATH_FOR_REQS="-e ./userpatches/oras-py-local"

          if [ -f "$REQUIREMENTS_FILE" ]; then
            # Comment out any existing oras package references to avoid conflicts
            sed -i -E '/^oras[[:space:]]*(==|>=|<=)/s/^/#/' "$REQUIREMENTS_FILE"
            sed -i -E '/^oras[[:space:]]*$/s/^/#/' "$REQUIREMENTS_FILE"
            sed -i -E '/^oras[[:space:]]*#/s/^/#/' "$REQUIREMENTS_FILE"

            # Clean up any previous oras-py-local references
            grep -v "^-e.*oras-py-local" "$REQUIREMENTS_FILE" > "${REQUIREMENTS_FILE}.tmp" && mv "${REQUIREMENTS_FILE}.tmp" "$REQUIREMENTS_FILE" || true

            # Add the local editable install reference
            if ! grep -qFx -- "$LOCAL_ORAS_PATH_FOR_REQS" "$REQUIREMENTS_FILE"; then
              echo "$LOCAL_ORAS_PATH_FOR_REQS" >> "$REQUIREMENTS_FILE"
              echo "✓ Added local oras-py to requirements.txt: $LOCAL_ORAS_PATH_FOR_REQS"
            else
              echo "✓ Local oras-py already configured in requirements.txt"
            fi

            echo "Updated requirements.txt:"
            grep -E "(oras|userpatches)" "$REQUIREMENTS_FILE" || echo "No oras references visible"
          else
            echo "✗ ERROR: $REQUIREMENTS_FILE not found!"
            exit 1
          fi

      - name: GitHub cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: |
            cache/memoize
            cache/oci/positive
          key: ${{ runner.os }}-matrix-cache-${{ github.sha }}-${{ steps.armbian-build-commit.outputs.armbian_build_sha1 }}-${{ steps.armbian-build-commit.outputs.armbian_os_sha1 }}-${{ steps.armbian-build-commit.outputs.custom_sha1 }}"
          restore-keys: |
            ${{ runner.os }}-matrix-cache-

      # Login to ghcr.io, we're gonna do a lot of OCI lookups.
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.actor }}" # GitHub username or org
          password: ${{ env.GHCR_TOKEN }}  # GitHub actions builtin token. repo has to have pkg access.

      - name: Prepare Info JSON and Matrices
        id: prepare-matrix
        run: |

          FILTERS="${{ github.event.inputs.targets_filter_incs }}"

          if [ -z "${FILTERS}" ] && [ "${{ github.event.inputs.board }}" != "all" ] && [ -n "${{ github.event.inputs.board }}" ]; then
              FILTERS='"BOARD:${{ github.event.inputs.board }}"'
          fi

          # if [ -z "${FILTERS}" ] && [ "${{ github.event.inputs.maintainer }}" != "all" ] && [ -n "${{ github.event.inputs.board }}" ]; then
          #     FILTERS='"BOARD_MAINTAINERS:${{ github.event.inputs.maintainer }}"'
          # fi

          cd build

          # Add debug environment variable to trigger our debug script
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            gha-matrix armbian-images \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            REVISION="${{ needs.build_prep.outputs.armbian_ver }}" \
            BETA=${{ env.NIGHTLY_BUILD }} \
            CLEAN_INFO=yes \
            CLEAN_MATRIX=yes \
            MATRIX_ARTIFACT_CHUNKS=17 \
            MATRIX_IMAGE_CHUNKS=16 \
            CHECK_OCI=${{ env.CHECK_OCI }} \
            TARGETS_FILENAME=${{ env.TARGETS_FILE }} \
            SKIP_IMAGES=${{ github.event.inputs.skip_images || 'no'}} \
            ${{env.EXTRA_PARAMS_ALL_BUILDS}} SHARE_LOG=no

      - name: "Logs: ${{ steps.prepare-matrix.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.prepare-matrix.outputs.logs_url }}"

      # Store output/info folder in a GitHub Actions artifact
      - uses: actions/upload-artifact@v4
        name: Upload output/info as GitHub Artifact
        with:
          name: build-info-json
          path: build/output/info

      - name: chown cache memoize/oci back to normal user
        run: sudo chown -R $USER:$USER build/cache/memoize build/cache/oci/positive

    outputs:
      # not related to matrix
      armbian_build_sha1: ${{ steps.armbian-build-commit.outputs.armbian_build_sha1 }}
      armbian_os_sha1: ${{ steps.armbian-os-commit.outputs.armbian_os_sha1 }}
      custom_sha1: ${{ steps.custom-commit.outputs.custom_sha1 }}

      armbian_ver: ${{ needs.build_prep.outputs.armbian_ver }}
      release_tag: ${{ needs.build_prep.outputs.release_tag }}
      release_ver: ${{ needs.build_prep.outputs.release_ver }}

       # artifacts-1 of 17
      artifacts-chunk-json-1: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-1 }}
      artifacts-chunk-not-empty-1: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-1 }}
      artifacts-chunk-size-1: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-1 }}
      # artifacts-2 of 17
      artifacts-chunk-json-2: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-2 }}
      artifacts-chunk-not-empty-2: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-2 }}
      artifacts-chunk-size-2: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-2 }}
      # artifacts-3 of 17
      artifacts-chunk-json-3: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-3 }}
      artifacts-chunk-not-empty-3: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-3 }}
      artifacts-chunk-size-3: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-3 }}
      # artifacts-4 of 17
      artifacts-chunk-json-4: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-4 }}
      artifacts-chunk-not-empty-4: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-4 }}
      artifacts-chunk-size-4: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-4 }}
      # artifacts-5 of 17
      artifacts-chunk-json-5: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-5 }}
      artifacts-chunk-not-empty-5: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-5 }}
      artifacts-chunk-size-5: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-5 }}
      # artifacts-6 of 17
      artifacts-chunk-json-6: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-6 }}
      artifacts-chunk-not-empty-6: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-6 }}
      artifacts-chunk-size-6: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-6 }}
      # artifacts-7 of 17
      artifacts-chunk-json-7: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-7 }}
      artifacts-chunk-not-empty-7: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-7 }}
      artifacts-chunk-size-7: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-7 }}
      # artifacts-8 of 17
      artifacts-chunk-json-8: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-8 }}
      artifacts-chunk-not-empty-8: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-8 }}
      artifacts-chunk-size-8: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-8 }}
      # artifacts-9 of 17
      artifacts-chunk-json-9: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-9 }}
      artifacts-chunk-not-empty-9: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-9 }}
      artifacts-chunk-size-9: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-9 }}
      # artifacts-10 of 17
      artifacts-chunk-json-10: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-10 }}
      artifacts-chunk-not-empty-10: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-10 }}
      artifacts-chunk-size-10: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-10 }}
      # artifacts-11 of 17
      artifacts-chunk-json-11: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-11 }}
      artifacts-chunk-not-empty-11: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-11 }}
      artifacts-chunk-size-11: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-11 }}
      # artifacts-12 of 17
      artifacts-chunk-json-12: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-12 }}
      artifacts-chunk-not-empty-12: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-12 }}
      artifacts-chunk-size-12: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-12 }}
      # artifacts-13 of 17
      artifacts-chunk-json-13: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-13 }}
      artifacts-chunk-not-empty-13: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-13 }}
      artifacts-chunk-size-13: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-13 }}
      # artifacts-14 of 17
      artifacts-chunk-json-14: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-14 }}
      artifacts-chunk-not-empty-14: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-14 }}
      artifacts-chunk-size-14: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-14 }}
      # artifacts-15 of 17
      artifacts-chunk-json-15: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-15 }}
      artifacts-chunk-not-empty-15: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-15 }}
      artifacts-chunk-size-15: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-15 }}
      # artifacts-16 of 17
      artifacts-chunk-json-16: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-16 }}
      artifacts-chunk-not-empty-16: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-16 }}
      artifacts-chunk-size-16: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-16 }}
      # artifacts-17 of 17
      artifacts-chunk-json-17: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-17 }}
      artifacts-chunk-not-empty-17: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-17 }}
      artifacts-chunk-size-17: ${{ steps.prepare-matrix.outputs.artifacts-chunk-size-17 }}

# template file: 151.per-chunk-images_prep-outputs.yaml

      # artifacts-1 of 16
      images-chunk-json-1: ${{ steps.prepare-matrix.outputs.images-chunk-json-1 }}
      images-chunk-not-empty-1: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-1 }}
      images-chunk-size-1: ${{ steps.prepare-matrix.outputs.images-chunk-size-1 }}
      # artifacts-2 of 16
      images-chunk-json-2: ${{ steps.prepare-matrix.outputs.images-chunk-json-2 }}
      images-chunk-not-empty-2: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-2 }}
      images-chunk-size-2: ${{ steps.prepare-matrix.outputs.images-chunk-size-2 }}
      # artifacts-3 of 16
      images-chunk-json-3: ${{ steps.prepare-matrix.outputs.images-chunk-json-3 }}
      images-chunk-not-empty-3: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-3 }}
      images-chunk-size-3: ${{ steps.prepare-matrix.outputs.images-chunk-size-3 }}
      # artifacts-4 of 16
      images-chunk-json-4: ${{ steps.prepare-matrix.outputs.images-chunk-json-4 }}
      images-chunk-not-empty-4: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-4 }}
      images-chunk-size-4: ${{ steps.prepare-matrix.outputs.images-chunk-size-4 }}
      # artifacts-5 of 16
      images-chunk-json-5: ${{ steps.prepare-matrix.outputs.images-chunk-json-5 }}
      images-chunk-not-empty-5: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-5 }}
      images-chunk-size-5: ${{ steps.prepare-matrix.outputs.images-chunk-size-5 }}
      # artifacts-6 of 16
      images-chunk-json-6: ${{ steps.prepare-matrix.outputs.images-chunk-json-6 }}
      images-chunk-not-empty-6: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-6 }}
      images-chunk-size-6: ${{ steps.prepare-matrix.outputs.images-chunk-size-6 }}
      # artifacts-7 of 16
      images-chunk-json-7: ${{ steps.prepare-matrix.outputs.images-chunk-json-7 }}
      images-chunk-not-empty-7: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-7 }}
      images-chunk-size-7: ${{ steps.prepare-matrix.outputs.images-chunk-size-7 }}
      # artifacts-8 of 16
      images-chunk-json-8: ${{ steps.prepare-matrix.outputs.images-chunk-json-8 }}
      images-chunk-not-empty-8: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-8 }}
      images-chunk-size-8: ${{ steps.prepare-matrix.outputs.images-chunk-size-8 }}
      # artifacts-9 of 16
      images-chunk-json-9: ${{ steps.prepare-matrix.outputs.images-chunk-json-9 }}
      images-chunk-not-empty-9: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-9 }}
      images-chunk-size-9: ${{ steps.prepare-matrix.outputs.images-chunk-size-9 }}
      # artifacts-10 of 16
      images-chunk-json-10: ${{ steps.prepare-matrix.outputs.images-chunk-json-10 }}
      images-chunk-not-empty-10: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-10 }}
      images-chunk-size-10: ${{ steps.prepare-matrix.outputs.images-chunk-size-10 }}
      # artifacts-11 of 16
      images-chunk-json-11: ${{ steps.prepare-matrix.outputs.images-chunk-json-11 }}
      images-chunk-not-empty-11: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-11 }}
      images-chunk-size-11: ${{ steps.prepare-matrix.outputs.images-chunk-size-11 }}
      # artifacts-12 of 16
      images-chunk-json-12: ${{ steps.prepare-matrix.outputs.images-chunk-json-12 }}
      images-chunk-not-empty-12: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-12 }}
      images-chunk-size-12: ${{ steps.prepare-matrix.outputs.images-chunk-size-12 }}
      # artifacts-13 of 16
      images-chunk-json-13: ${{ steps.prepare-matrix.outputs.images-chunk-json-13 }}
      images-chunk-not-empty-13: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-13 }}
      images-chunk-size-13: ${{ steps.prepare-matrix.outputs.images-chunk-size-13 }}
      # artifacts-14 of 16
      images-chunk-json-14: ${{ steps.prepare-matrix.outputs.images-chunk-json-14 }}
      images-chunk-not-empty-14: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-14 }}
      images-chunk-size-14: ${{ steps.prepare-matrix.outputs.images-chunk-size-14 }}
      # artifacts-15 of 16
      images-chunk-json-15: ${{ steps.prepare-matrix.outputs.images-chunk-json-15 }}
      images-chunk-not-empty-15: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-15 }}
      images-chunk-size-15: ${{ steps.prepare-matrix.outputs.images-chunk-size-15 }}
      # artifacts-16 of 16
      images-chunk-json-16: ${{ steps.prepare-matrix.outputs.images-chunk-json-16 }}
      images-chunk-not-empty-16: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-16 }}
      images-chunk-size-16: ${{ steps.prepare-matrix.outputs.images-chunk-size-16 }}

  # ------ aggregate all artifact chunks into a single dependency -------

  all-artifacts-ready:
    name: "17 artifacts chunks ready"
    runs-on: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}
    if: ${{ !cancelled() && ( 1 == 2 ) }} # eg: never run.
    needs:
      - "matrix_prep"
      - "build-artifacts-chunk-1"
      - "build-artifacts-chunk-2"
      - "build-artifacts-chunk-3"
      - "build-artifacts-chunk-4"
      - "build-artifacts-chunk-5"
      - "build-artifacts-chunk-6"
      - "build-artifacts-chunk-7"
      - "build-artifacts-chunk-8"
      - "build-artifacts-chunk-9"
      - "build-artifacts-chunk-10"
      - "build-artifacts-chunk-11"
      - "build-artifacts-chunk-12"
      - "build-artifacts-chunk-13"
      - "build-artifacts-chunk-14"
      - "build-artifacts-chunk-15"
      - "build-artifacts-chunk-16"
      - "build-artifacts-chunk-17" # <-- HERE: all artifact chunk numbers.
    steps:
      - name: fake step
        run: uptime

  all-images-ready:
    name: "16 image chunks ready"
    runs-on: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}
    if: ${{ !cancelled() && ( 1 == 2 ) }} # eg: never run.
    needs:
      - "matrix_prep"
      - "build-images-chunk-1"
      - "build-images-chunk-2"
      - "build-images-chunk-3"
      - "build-images-chunk-4"
      - "build-images-chunk-5"
      - "build-images-chunk-6"
      - "build-images-chunk-7"
      - "build-images-chunk-8"
      - "build-images-chunk-9"
      - "build-images-chunk-10"
      - "build-images-chunk-11"
      - "build-images-chunk-12"
      - "build-images-chunk-13"
      - "build-images-chunk-14"
      - "build-images-chunk-15"
      - "build-images-chunk-16" # <-- HERE: all image chunk numbers.
    steps:
      - name: fake step
        run: uptime

  all-artifacts-and-images-ready:
    name: "17 artifacts and 16 image chunks ready"
    runs-on: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}
    if: ${{ !cancelled() && ( 1 == 2 ) }} # eg: never run.
    needs:
      - "matrix_prep"
      - "all-artifacts-ready"
      - "all-images-ready"
    steps:
      - name: fake step
        run: uptime

  build-artifacts-chunk-1:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-1 == 'yes' }}
    needs: [ matrix_prep ]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-1) }}
    name: ${{ matrix.desc || 'Empty A1' }} # <-- HERE: Chunk number.
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-2:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-2 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-2) }}
    name: ${{ matrix.desc || 'Empty A2' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-3:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-3 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-3) }}
    name: ${{ matrix.desc || 'Empty A3' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-4:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-4 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-4) }}
    name: ${{ matrix.desc || 'Empty A4' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-5:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-5 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-5) }}
    name: ${{ matrix.desc || 'Empty A5' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-6:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-6 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-6) }}
    name: ${{ matrix.desc || 'Empty A6' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-7:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-7 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-7) }}
    name: ${{ matrix.desc || 'Empty A7' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-8:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-8 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-8) }}
    name: ${{ matrix.desc || 'Empty A8' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-9:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-9 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-9) }}
    name: ${{ matrix.desc || 'Empty A9' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-10:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-10 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-10) }}
    name: ${{ matrix.desc || 'Empty A10' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-11:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-11 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-11) }}
    name: ${{ matrix.desc || 'Empty A11' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-12:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-12 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-12) }}
    name: ${{ matrix.desc || 'Empty A12' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-13:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-13 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-13) }}
    name: ${{ matrix.desc || 'Empty A13' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-14:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-14 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-14) }}
    name: ${{ matrix.desc || 'Empty A14' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-15:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-15 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-15) }}
    name: ${{ matrix.desc || 'Empty A15' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-16:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-16 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-16) }}
    name: ${{ matrix.desc || 'Empty A16' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-17:
    if: ${{ github.actor == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-17 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-17) }}
    name: ${{ matrix.desc || 'Empty A17' }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout workflow repo (for local actions)
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: gh-actions
          fetch-depth: 1
          clean: false

      - name: Build ${{ matrix.desc }}
        id: build
        uses: ./gh-actions/.github/actions/build-artifacts-chunck
        timeout-minutes: 180
        with:
          desc: ${{ matrix.desc }}
          invocation: ${{ matrix.invocation }}
          fdepth: ${{ matrix.fdepth }}
          armbian_build_sha1: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          armbian_ver: ${{ needs.matrix_prep.outputs.armbian_ver }}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-images-chunk-1:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-1 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-1) }}
    name: ${{ matrix.desc || 'Empty I1' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      # cleanup the place where we will clone the userpatches repo, to avoid git going insane and cleaning everything later
      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      # clone the userpatches repo (`armbian/os`)
      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false # true is default.
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          # calculate loop from runner name
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I1.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I1.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I1"
          path: "oss-urls/image-urls-I1.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I1.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I1.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I1"
          path: "obs-urls/image-urls-I1.txt"

  build-images-chunk-2:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-2 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-2) }}
    name: ${{ matrix.desc || 'Empty I2' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I2.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I2.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I2"
          path: "oss-urls/image-urls-I2.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I2.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I2.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I2"
          path: "obs-urls/image-urls-I2.txt"

  build-images-chunk-3:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-3 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-3) }}
    name: ${{ matrix.desc || 'Empty I3' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I3.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I3.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I3"
          path: "oss-urls/image-urls-I3.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I3.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I3.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I3"
          path: "obs-urls/image-urls-I3.txt"

  build-images-chunk-4:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-4 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-4) }}
    name: ${{ matrix.desc || 'Empty I4' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I4.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I4.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I4"
          path: "oss-urls/image-urls-I4.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I4.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I4.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I4"
          path: "obs-urls/image-urls-I4.txt"

  build-images-chunk-5:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-5 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-5) }}
    name: ${{ matrix.desc || 'Empty I5' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I5.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I5.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I5"
          path: "oss-urls/image-urls-I5.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I5.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I5.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I5"
          path: "obs-urls/image-urls-I5.txt"

  build-images-chunk-6:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-6 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-6) }}
    name: ${{ matrix.desc || 'Empty I6' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I6.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I6.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I6"
          path: "oss-urls/image-urls-I6.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I6.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I6.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I6"
          path: "obs-urls/image-urls-I6.txt"

  build-images-chunk-7:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-7 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-7) }}
    name: ${{ matrix.desc || 'Empty I7' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I7.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I7.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I7"
          path: "oss-urls/image-urls-I7.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I7.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I7.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I7"
          path: "obs-urls/image-urls-I7.txt"

  build-images-chunk-8:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-8 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-8) }}
    name: ${{ matrix.desc || 'Empty I8' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I8.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I8.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I8"
          path: "oss-urls/image-urls-I8.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I8.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I8.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I8"
          path: "obs-urls/image-urls-I8.txt"

  build-images-chunk-9:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-9 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-9) }}
    name: ${{ matrix.desc || 'Empty I9' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I9.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I9.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I9"
          path: "oss-urls/image-urls-I9.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I9.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I9.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I9"
          path: "obs-urls/image-urls-I9.txt"

  build-images-chunk-10:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-10 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-10) }}
    name: ${{ matrix.desc || 'Empty I10' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I10.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I10.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I10"
          path: "oss-urls/image-urls-I10.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I10.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I10.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I10"
          path: "obs-urls/image-urls-I10.txt"

  build-images-chunk-11:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-11 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-11) }}
    name: ${{ matrix.desc || 'Empty I11' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I11.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I11.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I11"
          path: "oss-urls/image-urls-I11.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I11.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I11.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I11"
          path: "obs-urls/image-urls-I11.txt"

  build-images-chunk-12:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-12 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-12) }}
    name: ${{ matrix.desc || 'Empty I12' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I12.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I12.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I12"
          path: "oss-urls/image-urls-I12.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I12.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I12.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I12"
          path: "obs-urls/image-urls-I12.txt"

  build-images-chunk-13:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-13 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-13) }}
    name: ${{ matrix.desc || 'Empty I13' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I13.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I13.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I13"
          path: "oss-urls/image-urls-I13.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I13.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I13.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I13"
          path: "obs-urls/image-urls-I13.txt"

  build-images-chunk-14:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-14 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-14) }}
    name: ${{ matrix.desc || 'Empty I14' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I14.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I14.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I14"
          path: "oss-urls/image-urls-I14.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I14.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I14.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I14"
          path: "obs-urls/image-urls-I14.txt"

  build-images-chunk-15:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-15 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-15) }}
    name: ${{ matrix.desc || 'Empty I15' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I15.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I15.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I15"
          path: "oss-urls/image-urls-I15.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I15.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I15.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I15"
          path: "obs-urls/image-urls-I15.txt"

  build-images-chunk-16:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.actor == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-16 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-16) }}
    name: ${{ matrix.desc || 'Empty I16' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo && rm -rf custom

      - name: Checkout build repo
        uses: actions/checkout@v5
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
            USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh \
            OCI_TARGET_BASE="ghcr.io/${{ github.repository }}/" \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.release_ver }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-I16.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-I16.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-I16"
          path: "oss-urls/image-urls-I16.txt"

      - name: Upload to OBS
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        timeout-minutes: 60
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          operation: upload
          local_path: ./output/images/**
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/
          exclude: ""
          preserve_structure: true
          checksum_validation: true
          progress: true

      - name: Report OBS uploading status
        if: ${{ steps.upload_to_obs.outputs.first_upload_url }}
        shell: bash
        run: |
          # Get the JSON array of URLs safely
          OBS_URLS_JSON=$(cat << 'EOF'
          ${{ steps.upload_to_obs.outputs.upload_urls }}
          EOF
          )

          echo "Successfully uploaded to OBS. Processing URLs..."
          mkdir -p obs-urls

          # Parse JSON and process each URL
          echo "$OBS_URLS_JSON" | jq -r '.[]' | while read -r url; do
            echo "OBS URL: $url"
            echo "$url" >> "obs-urls/image-urls-I16.txt"
          done

          # Show summary
          URL_COUNT=$(echo "$OBS_URLS_JSON" | jq -r '. | length')
          echo "Total $URL_COUNT OBS URLs have been written to obs-urls/image-urls-I16.txt"

      - name: Upload OBS URL
        if: ${{ always() && steps.upload_to_obs.outputs.first_upload_url }}
        uses: actions/upload-artifact@v4
        with:
          name: "obs-urls-I16"
          path: "obs-urls/image-urls-I16.txt"

  # ------ publish packages to repository -------

  publish-debs-to-repo:
    name: "Download artifacts from ORAS cache"
    runs-on: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}
    # This will run in non-test mode
    if: ${{ !failure() && !cancelled() && github.event.client_payload.custom_ref == '' }}
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.actor }}" # GitHub username or org
          password: "${{ env.GHCR_TOKEN }}"    # GitHub actions builtin token. repo has to have pkg access.

      # cleanup the place where we will clone the userpatches repo, to avoid git going insane and cleaning everything later
      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo

      - name: Checkout build repo
        uses: actions/checkout@v5 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: 0
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      # clone the userpatches repo (`armbian/os`)
      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: 0
          clean: false # true is default.
          path: userpatches.repo

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          #rm -rf userpatches.repo

      # Clean off output/info, if any
      # Clean off debs and debs-beta
      - name: Cleanup output/info
        run: |
          rm -rfv output/info output/debs output/debs-beta
          mkdir -pv output

      # Download the artifacts (output/info) produced by the prepare-matrix job.
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-info-json
          path: output/info

      # List the artifacts we downloaded
      - name: List artifacts
        run: |
          ls -laht output/info

      - name: Download the debs
        id: download-debs
        run: |
          bash ./compile.sh debs-to-repo-download REVISION="${{ needs.matrix_prep.outputs.armbian_ver }}" BETA=${{ env.NIGHTLY_BUILD || 'no' }} SHARE_LOG=no ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Fix permissions
        run: |
          sudo chown -R $USER:$USER output/.

      # Upload the parts too
      - name: Upload to OSS
        timeout-minutes: 60
        if: ${{ (github.event.inputs.skip_images || 'no') == 'no' }}
        id: upload_to_oss
        uses: diverger/gh-oss-helper@v1
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          access-key: ${{ secrets.OSS_ACCESS_KEY }}
          secret-key: ${{ secrets.OSS_SECRET_KEY }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          timeout: 3600
          continue-on-error: true
          assets: ./output/debs***:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/partial/

      # TODO: In official version, next will inform the armbian/os repo to update the repository, what should we do?

      - name: "Logs debs-to-repo-download: ${{ steps.download-debs.outputs.logs_url }}"
        run: |
          echo "Logs debs-to-repo-download: ${{ steps.download-debs.outputs.logs_url }}"

      # Upload the parts to OBS
      - name: Upload to OBS
        timeout-minutes: 60
        if: ${{ (github.event.inputs.skip_images || 'no') == 'no' }}
        id: upload_to_obs
        uses: diverger/gh-obs-helper@v1
        with:
          access_key: ${{ secrets.OBS_ACCESS_KEY }}
          secret_key: ${{ secrets.OBS_SECRET_KEY }}
          region: ${{ secrets.OBS_REGION }}
          bucket: ${{ secrets.OBS_BUCKET }}
          local_path: ./output/debs***
          obs_path: armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.armbian_ver }}/partial/

      # TODO: In official version, next will inform the armbian/os repo to update the repository, what should we do?

      - name: "Logs debs-to-repo-download: ${{ steps.download-debs.outputs.logs_url }}"
        run: |
          echo "Logs debs-to-repo-download: ${{ steps.download-debs.outputs.logs_url }}"

    outputs:

      # not related to matrix
      version: ${{ needs.matrix_prep.outputs.armbian_ver }}

  # ------ aggregate all artifact chunks into a single dependency -------

  closing:
    name: "Footer"
    runs-on: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}
    if: >
      ${{
        !failure() && !cancelled() &&
        ((github.event_name == 'workflow_dispatch' && github.event.inputs.nightly == 'yes') ||
        (github.event_name == 'repository_dispatch' && github.event.client_payload.custom_ref == '' && github.event.client_payload.nightly == 'yes'))}}

    needs: [ "matrix_prep", "all-artifacts-ready", "all-images-ready" ]
    steps:

      - uses: geekyeggo/delete-artifact@v5
        with:
          name: assets-for-download-${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}
          failOnError: false

      # For now, we won't build image files for nightly builds
      # Cleaning logs
      - name: "Keep only 7 days of workflow logs"
        uses: igorjs/gh-actions-clean-workflow@v6
        with:
          token: ${{ env.GH_TOKEN }}
          runs_older_than: 7 # optional
          runs_to_keep: 0 # optional

  release:
    name: "Release"
    runs-on: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}
    if: ${{ !failure() && !cancelled() && (github.event_name == 'repository_dispatch' && github.event.client_payload.release_tag) }}
    needs: [ "matrix_prep", "all-artifacts-ready", "all-images-ready" ]
    steps:

      - name: "Generate release stamp"
        id: release_stamp
        run: |
          echo "Release version: ${{ needs.matrix_prep.outputs.release_tag }}" >> release.txt
          echo "Armbian version: ${{ needs.matrix_prep.outputs.armbian_ver }}" >> release.txt
          echo "Custom build: ${{ needs.matrix_prep.outputs.armbian_build_sha1 }}" >> release.txt
          echo "Custom os: ${{ needs.matrix_prep.outputs.armbian_os_sha1 }}" >> release.txt
          echo "Custom: ${{ needs.matrix_prep.outputs.custom_sha1 }}" >> release.txt
          echo "Baker: ${{ github.sha }}" >> release.txt

      - name: Download all OSS URL artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: oss-urls-*
          merge-multiple: true
          path: combined-oss-urls

      - name: Combine all OSS URLs
        run: |
          mkdir -p oss-urls
          cat combined-oss-urls/* > oss-urls/oss-urls.txt
          echo "Combined OSS URLs into oss-urls/oss-urls.txt"

      - name: Download all OBS URL artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: obs-urls-*
          merge-multiple: true
          path: combined-obs-urls

      - name: Combine all OBS URLs
        run: |
          mkdir -p obs-urls
          cat combined-obs-urls/* > obs-urls/obs-urls.txt
          echo "Combined OBS URLs into obs-urls/obs-urls.txt"

      # - name: Publish to Github Releases
      #   uses: xresloader/upload-to-github-release@v1

      #   with:
      #     release_id: ${{ env.RELEASE_ID }}
      #     target_owner: ${{ github.repository_owner }}
      #     target_repo: armbian-custom
      #     branches: main
      #     token: ${{ env.GH_TOKEN }}
      #     overwrite: true
      #     file: "release.txt;oss-urls/image-urls.txt"
      #     verbose: true

      - name: Publish to GitHub release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ env.GH_TOKEN }}
          owner: ${{ github.actor }}
          repo: 'armbian-custom'
          tag: ${{ env.RELEASE_TAG }}
          artifacts: 'release.txt,oss-urls/oss-urls.txt,obs-urls/obs-urls.txt'
          artifactContentType: 'text/plain'
          allowUpdates: true
          replacesArtifacts: true
          omitBodyDuringUpdate: true
          omitBody: true
          omitName: true
          makeLatest: false
          omitPrereleaseDuringUpdate: true
          # omitDraftDuringUpdate: true
          # This will force the updated version to draft status
          draft: true
